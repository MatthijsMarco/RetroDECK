#!/bin/bash

# Mapping of country codes to flag emojis
declare -A country_flags=(
  ["af"]="ğŸ‡¦ğŸ‡«"
  ["ax"]="ğŸ‡¦ğŸ‡½"
  ["al"]="ğŸ‡¦ğŸ‡±"
  ["dz"]="ğŸ‡©ğŸ‡¿"
  ["as"]="ğŸ‡¦ğŸ‡¸"
  ["ad"]="ğŸ‡¦ğŸ‡©"
  ["ao"]="ğŸ‡¦ğŸ‡´"
  ["ai"]="ğŸ‡¦ğŸ‡®"
  ["aq"]="ğŸ‡¦ğŸ‡¶"
  ["ag"]="ğŸ‡¦ğŸ‡¬"
  ["ar"]="ğŸ‡¦ğŸ‡·"
  ["am"]="ğŸ‡¦ğŸ‡²"
  ["aw"]="ğŸ‡¦ğŸ‡¼"
  ["au"]="ğŸ‡¦ğŸ‡º"
  ["at"]="ğŸ‡¦ğŸ‡¹"
  ["az"]="ğŸ‡¦ğŸ‡¿"
  ["bs"]="ğŸ‡§ğŸ‡¸"
  ["bh"]="ğŸ‡§ğŸ‡­"
  ["bd"]="ğŸ‡§ğŸ‡©"
  ["bb"]="ğŸ‡§ğŸ‡§"
  ["by"]="ğŸ‡§ğŸ‡¾"
  ["be"]="ğŸ‡§ğŸ‡ª"
  ["bz"]="ğŸ‡§ğŸ‡¿"
  ["bj"]="ğŸ‡§ğŸ‡¯"
  ["bm"]="ğŸ‡§ğŸ‡²"
  ["bt"]="ğŸ‡§ğŸ‡¹"
  ["bo"]="ğŸ‡§ğŸ‡´"
  ["bq"]="ğŸ‡§ğŸ‡¶"
  ["ba"]="ğŸ‡§ğŸ‡¦"
  ["bw"]="ğŸ‡§ğŸ‡¼"
  ["bv"]="ğŸ‡§ğŸ‡»"
  ["br"]="ğŸ‡§ğŸ‡·"
  ["io"]="ğŸ‡®ğŸ‡´"
  ["bn"]="ğŸ‡§ğŸ‡³"
  ["bg"]="ğŸ‡§ğŸ‡¬"
  ["bf"]="ğŸ‡§ğŸ‡«"
  ["bi"]="ğŸ‡§ğŸ‡®"
  ["kh"]="ğŸ‡°ğŸ‡­"
  ["cm"]="ğŸ‡¨ğŸ‡²"
  ["ca"]="ğŸ‡¨ğŸ‡¦"
  ["cv"]="ğŸ‡¨ğŸ‡»"
  ["ky"]="ğŸ‡°ğŸ‡¾"
  ["cf"]="ğŸ‡¨ğŸ‡«"
  ["td"]="ğŸ‡¹ğŸ‡©"
  ["cl"]="ğŸ‡¨ğŸ‡±"
  ["cn"]="ğŸ‡¨ğŸ‡³"
  ["cx"]="ğŸ‡¨ğŸ‡½"
  ["cc"]="ğŸ‡¨ğŸ‡¨"
  ["co"]="ğŸ‡¨ğŸ‡´"
  ["km"]="ğŸ‡°ğŸ‡²"
  ["cd"]="ğŸ‡¨ğŸ‡©"
  ["cg"]="ğŸ‡¨ğŸ‡¬"
  ["ck"]="ğŸ‡¨ğŸ‡°"
  ["cr"]="ğŸ‡¨ğŸ‡·"
  ["ci"]="ğŸ‡¨ğŸ‡®"
  ["hr"]="ğŸ‡­ğŸ‡·"
  ["cu"]="ğŸ‡¨ğŸ‡º"
  ["cw"]="ğŸ‡¨ğŸ‡¼"
  ["cy"]="ğŸ‡¨ğŸ‡¾"
  ["cz"]="ğŸ‡¨ğŸ‡¿"
  ["dk"]="ğŸ‡©ğŸ‡°"
  ["dj"]="ğŸ‡©ğŸ‡¯"
  ["dm"]="ğŸ‡©ğŸ‡²"
  ["do"]="ğŸ‡©ğŸ‡´"
  ["ec"]="ğŸ‡ªğŸ‡¨"
  ["eg"]="ğŸ‡ªğŸ‡¬"
  ["sv"]="ğŸ‡¸ğŸ‡»"
  ["gq"]="ğŸ‡¬ğŸ‡¶"
  ["er"]="ğŸ‡ªğŸ‡·"
  ["ee"]="ğŸ‡ªğŸ‡ª"
  ["et"]="ğŸ‡ªğŸ‡¹"
  ["fk"]="ğŸ‡«ğŸ‡°"
  ["fo"]="ğŸ‡«ğŸ‡´"
  ["fj"]="ğŸ‡«ğŸ‡¯"
  ["fi"]="ğŸ‡«ğŸ‡®"
  ["fr"]="ğŸ‡«ğŸ‡·"
  ["gf"]="ğŸ‡¬ğŸ‡«"
  ["pf"]="ğŸ‡µğŸ‡«"
  ["tf"]="ğŸ‡¹ğŸ‡«"
  ["ga"]="ğŸ‡¬ğŸ‡¦"
  ["gm"]="ğŸ‡¬ğŸ‡²"
  ["ge"]="ğŸ‡¬ğŸ‡ª"
  ["de"]="ğŸ‡©ğŸ‡ª"
  ["gh"]="ğŸ‡¬ğŸ‡­"
  ["gi"]="ğŸ‡¬ğŸ‡®"
  ["gr"]="ğŸ‡¬ğŸ‡·"
  ["gl"]="ğŸ‡¬ğŸ‡±"
  ["gd"]="ğŸ‡¬ğŸ‡©"
  ["gp"]="ğŸ‡¬ğŸ‡µ"
  ["gu"]="ğŸ‡¬ğŸ‡º"
  ["gt"]="ğŸ‡¬ğŸ‡¹"
  ["gg"]="ğŸ‡¬ğŸ‡¬"
  ["gn"]="ğŸ‡¬ğŸ‡³"
  ["gw"]="ğŸ‡¬ğŸ‡¼"
  ["gy"]="ğŸ‡¬ğŸ‡¾"
  ["ht"]="ğŸ‡­ğŸ‡¹"
  ["hm"]="ğŸ‡­ğŸ‡²"
  ["va"]="ğŸ‡»ğŸ‡¦"
  ["hn"]="ğŸ‡­ğŸ‡³"
  ["hk"]="ğŸ‡­ğŸ‡°"
  ["hu"]="ğŸ‡­ğŸ‡º"
  ["is"]="ğŸ‡®ğŸ‡¸"
  ["in"]="ğŸ‡®ğŸ‡³"
  ["id"]="ğŸ‡®ğŸ‡©"
  ["ir"]="ğŸ‡®ğŸ‡·"
  ["iq"]="ğŸ‡®ğŸ‡¶"
  ["ie"]="ğŸ‡®ğŸ‡ª"
  ["im"]="ğŸ‡®ğŸ‡²"
  ["il"]="ğŸ‡®ğŸ‡±"
  ["it"]="ğŸ‡®ğŸ‡¹"
  ["jm"]="ğŸ‡¯ğŸ‡²"
  ["jp"]="ğŸ‡¯ğŸ‡µ"
  ["je"]="ğŸ‡¯ğŸ‡ª"
  ["jo"]="ğŸ‡¯ğŸ‡´"
  ["kz"]="ğŸ‡°ğŸ‡¿"
  ["ke"]="ğŸ‡°ğŸ‡ª"
  ["ki"]="ğŸ‡°ğŸ‡®"
  ["kp"]="ğŸ‡°ğŸ‡µ"
  ["kr"]="ğŸ‡°ğŸ‡·"
  ["kw"]="ğŸ‡°ğŸ‡¼"
  ["kg"]="ğŸ‡°ğŸ‡¬"
  ["la"]="ğŸ‡±ğŸ‡¦"
  ["lv"]="ğŸ‡±ğŸ‡»"
  ["lb"]="ğŸ‡±ğŸ‡§"
  ["ls"]="ğŸ‡±ğŸ‡¸"
  ["lr"]="ğŸ‡±ğŸ‡·"
  ["ly"]="ğŸ‡±ğŸ‡¾"
  ["li"]="ğŸ‡±ğŸ‡®"
  ["lt"]="ğŸ‡±ğŸ‡¹"
  ["lu"]="ğŸ‡±ğŸ‡º"
  ["mo"]="ğŸ‡²ğŸ‡´"
  ["mg"]="ğŸ‡²ğŸ‡¬"
  ["mw"]="ğŸ‡²ğŸ‡¼"
  ["my"]="ğŸ‡²ğŸ‡¾"
  ["mv"]="ğŸ‡²ğŸ‡»"
  ["ml"]="ğŸ‡²ğŸ‡±"
  ["mt"]="ğŸ‡²ğŸ‡¹"
  ["mh"]="ğŸ‡²ğŸ‡­"
  ["mq"]="ğŸ‡²ğŸ‡¶"
  ["mr"]="ğŸ‡²ğŸ‡·"
  ["mu"]="ğŸ‡²ğŸ‡º"
  ["yt"]="ğŸ‡¾ğŸ‡¹"
  ["mx"]="ğŸ‡²ğŸ‡½"
  ["fm"]="ğŸ‡«ğŸ‡²"
  ["md"]="ğŸ‡²ğŸ‡©"
  ["mc"]="ğŸ‡²ğŸ‡¨"
  ["mn"]="ğŸ‡²ğŸ‡³"
  ["me"]="ğŸ‡²ğŸ‡ª"
  ["ms"]="ğŸ‡²ğŸ‡¸"
  ["ma"]="ğŸ‡²ğŸ‡¦"
  ["mz"]="ğŸ‡²ğŸ‡¿"
  ["mm"]="ğŸ‡²ğŸ‡²"
  ["na"]="ğŸ‡³ğŸ‡¦"
  ["nr"]="ğŸ‡³ğŸ‡·"
  ["np"]="ğŸ‡³ğŸ‡µ"
  ["nl"]="ğŸ‡³ğŸ‡±"
  ["nc"]="ğŸ‡³ğŸ‡¨"
  ["nz"]="ğŸ‡³ğŸ‡¿"
  ["ni"]="ğŸ‡³ğŸ‡®"
  ["ne"]="ğŸ‡³ğŸ‡ª"
  ["ng"]="ğŸ‡³ğŸ‡¬"
  ["nu"]="ğŸ‡³ğŸ‡º"
  ["nf"]="ğŸ‡³ğŸ‡«"
  ["mk"]="ğŸ‡²ğŸ‡°"
  ["mp"]="ğŸ‡²ğŸ‡µ"
  ["no"]="ğŸ‡³ğŸ‡´"
  ["om"]="ğŸ‡´ğŸ‡²"
  ["pk"]="ğŸ‡µğŸ‡°"
  ["pw"]="ğŸ‡µğŸ‡¼"
  ["ps"]="ğŸ‡µğŸ‡¸"
  ["pa"]="ğŸ‡µğŸ‡¦"
  ["pg"]="ğŸ‡µğŸ‡¬"
  ["py"]="ğŸ‡µğŸ‡¾"
  ["pe"]="ğŸ‡µğŸ‡ª"
  ["ph"]="ğŸ‡µğŸ‡­"
  ["pn"]="ğŸ‡µğŸ‡³"
  ["pl"]="ğŸ‡µğŸ‡±"
  ["pt"]="ğŸ‡µğŸ‡¹"
  ["pr"]="ğŸ‡µğŸ‡·"
  ["qa"]="ğŸ‡¶ğŸ‡¦"
  ["re"]="ğŸ‡·ğŸ‡ª"
  ["ro"]="ğŸ‡·ğŸ‡´"
  ["ru"]="ğŸ‡·ğŸ‡º"
  ["rw"]="ğŸ‡·ğŸ‡¼"
  ["bl"]="ğŸ‡§ğŸ‡±"
  ["sh"]="ğŸ‡¸ğŸ‡­"
  ["kn"]="ğŸ‡°ğŸ‡³"
  ["lc"]="ğŸ‡±ğŸ‡¨"
  ["mf"]="ğŸ‡²ğŸ‡«"
  ["pm"]="ğŸ‡µğŸ‡²"
  ["vc"]="ğŸ‡»ğŸ‡¨"
  ["ws"]="ğŸ‡¼ğŸ‡¸"
  ["sm"]="ğŸ‡¸ğŸ‡²"
  ["st"]="ğŸ‡¸ğŸ‡¹"
  ["sa"]="ğŸ‡¸ğŸ‡¦"
  ["sn"]="ğŸ‡¸ğŸ‡³"
  ["rs"]="ğŸ‡·ğŸ‡¸"
  ["sc"]="ğŸ‡¸ğŸ‡¨"
  ["sl"]="ğŸ‡¸ğŸ‡±"
  ["sg"]="ğŸ‡¸ğŸ‡¬"
  ["sx"]="ğŸ‡¸ğŸ‡½"
  ["sk"]="ğŸ‡¸ğŸ‡°"
  ["si"]="ğŸ‡¸ğŸ‡®"
  ["sb"]="ğŸ‡¸ğŸ‡§"
  ["so"]="ğŸ‡¸ğŸ‡´"
  ["za"]="ğŸ‡¿ğŸ‡¦"
  ["gs"]="ğŸ‡¬ğŸ‡¸"
  ["ss"]="ğŸ‡¸ğŸ‡¸"
  ["es"]="ğŸ‡ªğŸ‡¸"
  ["lk"]="ğŸ‡±ğŸ‡°"
  ["sd"]="ğŸ‡¸ğŸ‡©"
  ["sr"]="ğŸ‡¸ğŸ‡·"
  ["sj"]="ğŸ‡¸ğŸ‡¯"
  ["se"]="ğŸ‡¸ğŸ‡ª"
  ["ch"]="ğŸ‡¨ğŸ‡­"
  ["sy"]="ğŸ‡¸ğŸ‡¾"
  ["tw"]="ğŸ‡¹ğŸ‡¼"
  ["tj"]="ğŸ‡¹ğŸ‡¯"
  ["tz"]="ğŸ‡¹ğŸ‡¿"
  ["th"]="ğŸ‡¹ğŸ‡­"
  ["tl"]="ğŸ‡¹ğŸ‡±"
  ["tg"]="ğŸ‡¹ğŸ‡¬"
  ["tk"]="ğŸ‡¹ğŸ‡°"
  ["to"]="ğŸ‡¹ğŸ‡´"
  ["tt"]="ğŸ‡¹ğŸ‡¹"
  ["tn"]="ğŸ‡¹ğŸ‡³"
  ["tr"]="ğŸ‡¹ğŸ‡·"
  ["tm"]="ğŸ‡¹ğŸ‡²"
  ["tc"]="ğŸ‡¹ğŸ‡¨"
  ["tv"]="ğŸ‡¹ğŸ‡»"
  ["ug"]="ğŸ‡ºğŸ‡¬"
  ["ua"]="ğŸ‡ºğŸ‡¦"
  ["ae"]="ğŸ‡¦ğŸ‡ª"
  ["gb"]="ğŸ‡¬ğŸ‡§"
  ["um"]="ğŸ‡ºğŸ‡²"
  ["us"]="ğŸ‡ºğŸ‡¸"
  ["uy"]="ğŸ‡ºğŸ‡¾"
  ["uz"]="ğŸ‡ºğŸ‡¿"
  ["vu"]="ğŸ‡»ğŸ‡º"
  ["ve"]="ğŸ‡»ğŸ‡ª"
  ["vn"]="ğŸ‡»ğŸ‡³"
  ["vg"]="ğŸ‡»ğŸ‡¬"
  ["vi"]="ğŸ‡»ğŸ‡®"
  ["wf"]="ğŸ‡¼ğŸ‡«"
  ["eh"]="ğŸ‡ªğŸ‡­"
  ["ye"]="ğŸ‡¾ğŸ‡ª"
  ["zm"]="ğŸ‡¿ğŸ‡²"
  ["zw"]="ğŸ‡¿ğŸ‡¼"
)


populate_table() {
  # URL of the RetroArch lobby API
  url="http://lobby.libretro.com/list"

  # Fetch the list of netplay rooms in JSON format
  response=$(curl -s "$url")

  # Check if the response is empty or if there are errors
  if [ -z "$response" ]; then
    zenity --error --text="Error connecting to the RetroArch Netplay server."
    exit 1
  fi

  # Parse the JSON response using jq
  rooms=$(echo "$response" | jq -r '.[] | .fields | [.country, .username, .game_name, .core_name, .has_password, .retroarch_version, .created, .game_crc, .ip, .port] | @tsv')

  # Initialize the results for the Zenity table
  results=()
  room_details=()

  # Process each room
  while IFS=$'\t' read -r country username game_name core_name has_password retroarch_version created game_crc ip port; do
    # Convert boolean to human-readable format
    if [ "$has_password" = "true" ]; then
      has_password="Yes"
    else
      has_password="No"
    fi

    # Get the flag emoji for the country
    flag="${country_flags[$country]}"

    # Add the extracted data to the results array
    results+=("$flag" "$username" "$game_name" "$core_name" "$has_password" "$retroarch_version" "$created")
    room_details+=("$country,$username,$game_name,$core_name,$has_password,$retroarch_version,$created,$game_crc,$ip,$port")
  done <<< "$rooms"

  # Check if results array is populated
  if [ ${#results[@]} -eq 0 ]; then
    zenity --info --title="Netplay Results" --text="No valid rooms found."
    exit 0
  fi

  # Display the results using Zenity in a table and get the selected row
  selected=$(zenity --list --width="1280" --height="800" \
    --title="Available Netplay Rooms" \
    --column="Loc" \
    --column="User" \
    --column="Game" \
    --column="Core" \
    --column="Password" \
    --column="Version" \
    --column="Created" \
    "${results[@]}" \
    --print-column=ALL)

  echo "$selected"
}

start_game() {
  selected="$1"
  room_details=("${@:2}")

  # Check if the user selected a row
  if [ -z "$selected" ]; then
    exit 0
  fi

  # Extract the details of the selected room
  selected_flag=$(echo "$selected" | awk -F'|' '{print $1}')
  selected_username=$(echo "$selected" | awk -F'|' '{print $2}')
  selected_game_name=$(echo "$selected" | awk -F'|' '{print $3}')
  selected_core_name=$(echo "$selected" | awk -F'|' '{print $4}')
  selected_has_password=$(echo "$selected" | awk -F'|' '{print $5}')
  selected_version=$(echo "$selected" | awk -F'|' '{print $6}')
  raw_dates=$(echo "$selected" | awk -F'|' '{print $7}')
  # Convert ISO 8601 format to human-readable format
  selected_created=$(date -d "$raw_dates" +"%Y-%m-%d %H:%M:%S")


  # Find the matching room details
  for room in "${room_details[@]}"; do
    IFS=',' read -r country username game_name core_name has_password retroarch_version created game_crc ip port <<< "$room"
    flag="${country_flags[$country]}"
    if [ "$flag" = "$selected_flag" ] && [ "$username" = "$selected_username" ] && [ "$game_name" = "$selected_game_name" ] && [ "$core_name" = "$selected_core_name" ] && [ "$has_password" = "$selected_has_password" ] && [ "$retroarch_version" = "$selected_version" ] && [ "$created" = "$selected_created" ]; then
      selected_game_crc="$game_crc"
      selected_ip="$ip"
      selected_port="$port"
      break
    fi
  done

  # Find the game ROM by name and then verify CRC
  found_rom=""
  candidates=($(find "$roms_folder" -type f -iname "*$(echo "$selected_game_name" | sed 's/[^a-zA-Z0-9]//g')*"))

  for rom in "${candidates[@]}"; do
    # Check the CRC of the ROM
    rom_crc=$(crc32 "$rom")
    if [ "$rom_crc" = "$selected_game_crc" ]; then
      found_rom="$rom"
      break
    fi
  done

  # Check if the ROM was found
  if [ -z "$found_rom" ]; then
    zenity --error --text="Game ROM not found or CRC mismatch."
    exit 1
  fi

  # Warn the user if the CRC is different
  if [ "$rom_crc" != "$selected_game_crc" ]; then
    zenity --warning --text="CRC mismatch! The game may not work correctly."
  fi

  # If the room has a password, ask for it
  if [ "$selected_has_password" = "Yes" ]; then
    password=$(zenity --entry --title="Password Required" --text="Enter the password for the netplay room:")
    if [ -z "$password" ]; then
      zenity --error --text="Password required to join the room."
      exit 1
    fi
    # Launch RetroArch with the selected game and netplay room details, including password
    retroarch -L "/app/share/libretro/cores/${selected_core_name}.so" "$found_rom" --connect "$selected_ip:$selected_port" --password "$password"
  else
    # Launch RetroArch without password
    retroarch -L "/app/share/libretro/cores/${selected_core_name}.so" "$found_rom" --connect "$selected_ip:$selected_port"
  fi
}

# Call the function to populate the table
selected_room=$(populate_table)

# Call the function to start the game
start_game "$selected_room" "${room_details[@]}"
